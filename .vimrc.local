" Init
source ~/.vim/bundle/vim-rooter/plugin/rooter.vim
silent execute 'Rooter'

" Epitech indentation
set smartindent
set cindent
set noexpandtab
set shiftwidth=2
set tabstop=8
set softtabstop=8
set cinoptions=(0,w1

" Folding
set foldmethod=syntax
set foldnestmax=1
set foldminlines=5
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview
inoremap zz <C-O>zi
nnoremap zz zi
onoremap zz <C-C>zi
nnoremap <silent> <space> @=(foldlevel('.')?'za':"\<space>")<CR>

nnoremap <silent> <leader>f :YcmCompleter FixIt<CR>

" Mapping
"" Save
nnoremap <silent> <leader>. :write<CR>
"" Delete the buffer
nnoremap ZV :bd <CR>
"" Reload of the header
nnoremap <silent> <leader>' :let cursor = getpos(".")<CR>ggv}hx:call EPIConfig("set")<CR><CR>dd:call setpos(".", cursor)<CR>
"" Switch on .vimrc.local
nnoremap <silent> <expr> <leader><space> expand("%") == ".vimrc.local" ? ":w \| bd<CR><CR>" : ":tabe ~/.vimrc.local<CR>"
"" Move between buffers

"" Move between split screen
nnoremap <silent> <leader><up> <C-W><up>
nnoremap <silent> <leader>k <C-W><up>
nnoremap <silent> <leader><down> <C-W><down>
nnoremap <silent> <leader>j <C-W><down>
nnoremap <silent> <leader><left> <C-W><left>
nnoremap <silent> <leader>h <C-W><left>
nnoremap <silent> <leader><right> <C-W><right>
nnoremap <silent> <leader>l <C-W><right>
unmap <silent> <leader>jt
"" Tabs
nnoremap <silent> <leader>< :tabprev<CR>
nnoremap <silent> <leader>> :tabnext<CR>
"" Indent all the file
nnoremap <silent> ( :let cursor = getpos(".")<CR>10G=G:call setpos(".", cursor)<CR>
"" Update tags
nnoremap <silent> <leader>o :!ctags -R <CR><CR>:UpdateTypesFile<CR>
"" Ctags
nnoremap <silent> L <C-]>
"" Man on vim
nnoremap <silent> K :<C-U>let manarg = expand("<cword>") \| let manpage = v:count1<CR>:tabnew<CR>:execute "SuperMan " . manpage . " " . manarg<CR>:set nonumber<CR>
"" Stop highlighting search
"nnoremap <silent> <leader>h :noh<CR>
nnoremap <silent> <leader>c :%s/“/"/g<CR>:%s/”/"/g<CR>:%s/‘/'/g<CR>:%s/’/'/g<CR>:noh<CR>
"" Toggle white highlighting
nnoremap <silent> <leader>@ :call EPIStuff()<CR>
nnoremap <silent> <leader>s :vs<CR>:VimShell<CR>

" 80 columns white highlighting
"function! EPIStuff()
"let $EPITECH = !$EPITECH
if (expand("%:e") == "c" || expand("%:e") == "h")
  highlight OverLength ctermbg=white guibg=#592929
  match OverLength /\%81v.\+/
endif

if (expand("%:e") == "gramz")
  source ~/.vim/bundle/rainbow/plugin/rainbow.vim
  RainbowToggle
  syntax match dot /:/
  syntax match quote /'/

  syntax match grammar /\[.-.\]/
  syntax match grammar /\./
  syntax match char /'.'/
  syntax match char /"\("\@!.\)*"/
  syntax match escape /\\'\@!./
  syntax match comment /^#.*$/
  syntax match quantifier /\*\|?\|-\|!\|+\||\|\./

  highlight Normal ctermfg=33
  highlight dot ctermfg=white
  highlight quantifier ctermfg=yellow
  highlight grammar ctermfg=brown
  highlight escape ctermfg=red
  highlight comment ctermfg=59
  highlight char ctermfg=cyan
  highlight quote ctermfg=cyan
endif

"else
"highlight clear OverLength
"endif
"syn off
"syn on
"endfunction

" YouCompleteMe stuff
let g:ycm_show_diagnostics_ui = 0
let g:ycm_global_ycm_extra_conf = '~/.vim.local/.ycm_extra_conf.py'

" Rooter
let g:rooter_patterns = ['.git', '.git/', 'Makefile']

" Syntastic stuff
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
if !empty(glob('.git'))
  "let g:syntastic_c_include_dirs = split(system('find . -type d -path "./include/*" -o -name "include" -o -name "include" -o -name "includes" -o -name "inc" -o -name "header" -o -name "headers" && echo "/home/hamon_e/.froot/include"'))
  let g:syntastic_c_include_dirs = split(system('echo ./headers ./headers_public ./*/headers_public ../*/headers_public'))
  "let g:syntastic_c_include_dirs = ['./include/']
endif

" UltiSnips conf for using Enter key as Expand Trigger
let g:UltiSnipsExpandTrigger = "<nop>"
let g:ulti_expand_or_jump_res = 0
function! ExpandSnippetOrCarriageReturn()
  let snippet = UltiSnips#ExpandSnippetOrJump()
  if g:ulti_expand_or_jump_res > 0
    return snippet
  else
    return "\<CR>"
  endif
endfunction
inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"

" TagHighLight stuff
if ! exists('g:TagHighlightSettings')
  let g:TagHighlightSettings = {}
endif
let g:TagHighlightSettings['ForcedPythonVariant'] = 'if_pyth'
let g:TagHighlightSettings['CtagsExecutable'] = 'etags'
hi link DefinedName Constant
hi link EnumeratorName Type
hi link EnumerationValue Normal
hi link LocalVariable Normal
hi link Member Normal
hi link Union Type
hi link GlobalVariable Normal

" CtrlP
"" Setup some default ignores
let g:ctrlp_custom_ignore = {
      \'dir': '\v[\/](\.(git|hg|svn)|\_site)$',
      \'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
      \}
" Use the nearest .git directory as the cwd
let g:ctrlp_working_path_mode = 'r'
"" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<CR>
"" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<CR>
nmap <leader>bm :CtrlPMixed<CR>
nmap <leader>bs :CtrlPMRU<CR>"

" Automatic Epitech header
function! EPIConfig(task)
  if a:task == "set"
    if expand("%") == "Makefile"
      execute "0read ~/.vim.local/headers/makefile"
    elseif expand("%:e") == "h"
      execute "0read ~/.vim.local/headers/h"
    elseif expand("%:e") == "c"
      execute "0read ~/.vim.local/headers/c"
    endif
    execute "%substitute,$FILE," . expand("%:t") . ",e"
    execute "%substitute,$FN," . '\U' . expand("%:t:r") . ",e"
    execute "%substitute,$FLDR," . expand("%:p:h:t") . ",e"
    execute "%substitute,$PATH," . expand("%:h") . ",e"
    execute "%substitute,$PN," . '\U' . substitute(expand("%:h"), "/", "_", "") . ",e"
    execute "%substitute,$PROJ," . split(FindRootDirectory(), "/")[-1] . ",e"
    execute "%substitute,$NAME," . $EPI_NAME . ",e"
    execute "%substitute,$NICK," . $EPI_LOGIN . ",e"
    execute "%substitute,$DATE," . strftime("%a %b %d %H:%M:%S %Y") . ",e"
    call EPIConfig("update")
    normal Go
    if expand("%:e") == "h"
      delete
      delete
      call setpos(".", [0, 14, 1, 0])
    endif
  elseif a:task == "update"
    let cursor = getpos(".")
    execute "%substitute,Last update.*,Last update " . strftime("%a %b %d %H:%M:%S %Y") . " " . $EPI_NAME . ",e"
    call setpos(".", cursor)
  endif
endfunction
autocmd BufNewFile *.{c,h},Makefile call EPIConfig("set")
autocmd BufWritePre *.{c,h},Makefile call EPIConfig("update")

" Automatic vimrc sourcing
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" neocomplete {
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
"let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" SuperTab like snippets behavior.
imap <silent><expr><TAB> neosnippet#expandable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
      \ "\<C-e>" : "\<TAB>")
smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
inoremap <expr><CR>      neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplete#omni_patterns')
  let g:neocomplete#omni_patterns = {}
endif
let g:neocomplete#omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplete#omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplete#omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplete#omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

" Use honza's snippets.
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" Enable neosnippet snipmate compatibility mode
let g:neosnippet#enable_snipmate_compatibility = 1

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
set completeopt-=preview
" }

let g:ycm_filetype_whitelist = { '/home/hamon_e/.ycm_extra_conf.py': 1 }
